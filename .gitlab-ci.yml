default:
  image: python:3.10
  before_script: # poetry virtual env initialization
    - apt-get update -qy
    - pip install poetry
    - export PATH="$HOME/.local/bin:$HOME/bin:$PATH"
    - poetry install --no-ansi --no-interaction
    - source `poetry env info --path`/bin/activate

stages:
  - linter
  - test
  - code coverage
  - compatability
  - test suite quality
  - publish

prospector:
  stage: linter
  script:
    - echo "This is the prospector linter stage"
    - poetry run -vvv lint
  allow_failure: true

test:
  stage: test
  script:
    - echo "Run Web App Tests"
    - poetry run -vvv test

pytest_statement:
  stage: code coverage
  script:
    - echo "This is the statement coverage test stage"
    - coverage run --omit="tests/*" -m pytest tests --junitxml=report.xml --html=report.html --self-contained-html
    - coverage report --ignore-errors
    - coverage xml --ignore-errors
    - coverage html --ignore-errors
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    name: "$CI_JOB_NAME"
    when: always
    paths:
      - htmlcov/*
      - report.html
    reports:
      junit: report.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

pytest_branch:
  stage: code coverage
  script:
    - echo "This is the branch coverage test stage"
    - coverage run --branch --omit="tests/*" -m pytest tests --junitxml=report.xml --html=report.html --self-contained-html
    - coverage report --ignore-errors
    - coverage xml --ignore-errors
    - coverage html --ignore-errors
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    name: "$CI_JOB_NAME"
    when: always
    paths:
      - htmlcov/*
      - report.html
    reports:
      junit: report.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

pytest_version:
  stage: compatability
  image: python:$VERSION
  needs: [prospector]
  script:
    - poetry install --no-ansi --no-interaction
    - source `poetry env info --path`/bin/activate
    - echo "This is the Python $VERSION compatability test stage"
    - poetry run pytest tests
  parallel:
    matrix:
      - VERSION: ['3.8', '3.9', '3.10', '3.11', '3.12', '3.13']

pytest_win_10:
  stage: compatability
  image: mcr.microsoft.com/windows
  needs: [prospector]
  allow_failure: true
  before_script: [ ]
  script:
    - python -m virtualenv pytest_win_10
    - .\pytest_win_10\Scripts\activate
    - python -m pip install poetry
    - python -m poetry install --no-ansi --no-interaction
    - echo "This is the Python Windows Server 2019 compatability test stage"
    - python -m poetry run pytest tests
  tags:
    - windows

pytest_wsl_win_10:
  stage: compatability
  image: mcr.microsoft.com/windows
  needs: [prospector]
  allow_failure: true
  before_script: [ ]
  script:
    - wsl python3 -m pip install poetry
    - wsl export PATH="$HOME/.local/bin:$HOME/bin:$PATH"
    - wsl export PATH="$HOME/.poetry/bin:$PATH"
    - wsl python3 -m poetry install --no-ansi --no-interaction
    - wsl python3 -m poetry env info --path
    - wsl echo "This is the Python 3.10 run in WSL1 run on Windows Server 2019 compatability test stage"
    - wsl bash -c 'PATH="\$HOME/.local/bin:\$HOME/bin:\$PATH" && export PATH="\$HOME/.poetry/bin:\$PATH" && python3 -m poetry run pytest tests'
  tags:
    - windows

publishing:
  stage: publish
  needs: [ prospector, test, pytest_statement, pytest_branch, pytest_version, pytest_win_10, pytest_wsl_win_10 ]
  script:
    - echo "This is the publish stage"
    - poetry config pypi-token.pypi "$PYPI_API_KEY"
    - poetry publish --build
    - echo "Publishing done!"
  only:
    - main
  when: manual
